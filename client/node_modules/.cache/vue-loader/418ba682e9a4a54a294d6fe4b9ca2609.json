{"remainingRequest":"C:\\Users\\omar othman\\Desktop\\mollyandstitchapp\\auto-fullfillment-app\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\omar othman\\Desktop\\mollyandstitchapp\\auto-fullfillment-app\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\omar othman\\Desktop\\mollyandstitchapp\\auto-fullfillment-app\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\omar othman\\Desktop\\mollyandstitchapp\\auto-fullfillment-app\\client\\src\\components\\ordercomponent.vue?vue&type=template&id=a1b52002&%3Akey=componentKey&","dependencies":[{"path":"C:\\Users\\omar othman\\Desktop\\mollyandstitchapp\\auto-fullfillment-app\\client\\src\\components\\ordercomponent.vue","mtime":1631049300403},{"path":"C:\\Users\\omar othman\\Desktop\\mollyandstitchapp\\auto-fullfillment-app\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\omar othman\\Desktop\\mollyandstitchapp\\auto-fullfillment-app\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\omar othman\\Desktop\\mollyandstitchapp\\auto-fullfillment-app\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\omar othman\\Desktop\\mollyandstitchapp\\auto-fullfillment-app\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}